generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model permission {
  id             String           @id
  name           String           @unique(map: "Permission_name_key")
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  rolepermission rolepermission[]
}

model role {
  id             String           @id
  name           String           @unique(map: "Role_name_key")
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  rolepermission rolepermission[]
  userrole       userrole[]
}

model rolepermission {
  id           String     @id
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  permission   permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "RolePermission_permissionId_fkey")
  role         role       @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "RolePermission_roleId_fkey")

  @@unique([roleId, permissionId], map: "RolePermission_roleId_permissionId_key")
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String     @id
  name          String?
  email         String?    @unique(map: "User_email_key")
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  account       account[]
  session       session[]
  userrole      userrole[]
}

model userrole {
  id        String   @id
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  role      role     @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "UserRole_roleId_fkey")
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserRole_userId_fkey")

  @@unique([userId, roleId], map: "UserRole_userId_roleId_key")
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
